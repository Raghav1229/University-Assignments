//============================================================================
// Name        : specterFunc.cpp
// Author      : Vlad
// Version     :
// Copyright   : A project that is too secret to show to anybody
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <fstream>
#include <cstring>
#include "specter2HTML.hpp"
#include "linearIndex.hpp"
#include "specterBuilder.hpp"
using namespace std;

/* f return numbers from 0 to 32767.
 * It should have crashed the program, but it doesn't. (maxF = 30).
 */
int f1()
{
	return rand();
}


// function that always returns 1
int f2()
{
	return 1;
}

int f3()
{
	return -1;
}

// SpecterBuilder test.
void test1 (SpecterBuilder &specterBuilder)
{
	int array[30][30][30] = {};

	// function that returns a value that is out of range of (0, maxF)
	int (*f1p) (void) = f1;
	int result = specterBuilder.universalSpecter(f1p, 20, 30, 3, **array);
	cout << result << endl;


	// function that returns a constant (1) -> 1 non-null element
	for (int i = 0; i < 30*30*30; i++)
	{
		*(**array+i) = 0;
	}
	int (*f2p) (void) = f2;
	result = specterBuilder.universalSpecter(f2p, 20, 30, 3, **array);
	cout << result << endl;

	// crashes the program as incorrect parameters were passed as arguments (exit code: -1)
	for (int i = 0; i < 30*30*30; i++)
	{
		*(**array+i) = i;
	}
	/*
	// can use f3p as first parameter and work with memory outside of an array. (bad, don't do that)
	int (*f3p) (void) = f3;
	result = specterBuilder.universalSpecter(f2p, 20, 30, 5, **array); // axes<=3 (!).
	cout << result << endl;
	*/
}


// Specter2HTML test
void test2 (SpecterBuilder &specterBuilder)
{
	Specter2HTML testObject;
	int (*f1p) (void) = f1;
	// redirecting the stream to the HTML file
	ofstream fout ("table.html");
	// create a test array
	int testArray[3][3][3][3][3][3][3][3][3] = {};
	// fill it with random numbers
	specterBuilder.universalSpecter(f1, 39, 3, 9, ********testArray);

	// write the string (a really long one) to the HTML file
	fout << testObject.specter2String(********testArray, 9, 3);
	// write the HTML to the console
	testObject.specter2cout(********testArray, 9, 3);
	// write the HTML directly to the file. Print out the amount of elements that were processed.
	cout << testObject.specter2File (********testArray, 9, 3,"file.txt");
	fout.close();
}


// Linearizer class test.
void test3 (SpecterBuilder &specterBuilder)
{
	// Create the object.
	Linearizer linearizer;
	// Given a 3-dimensional array, find the coordinates of the same element in flattened array.
	// For example, let's take (1,1,1).
	int coordinates[3] = {1,1,1};
	// As there are 27 elements in 3*3*3 array, (1, 1, 1) will have the coordinate 13 (given that we start counting from 0).
	cout << ' ' << linearizer.lIndex(3, 3, coordinates);

}

void help()
{
	cout << "Pass an argument 'help', 'test1', 'test2', 'test3' or 'all' to the program to see how it is working." << endl;
}


int main(int argc, char **argv)
{
	SpecterBuilder specterBuilder;
	if (argc == 0)
	{
		cout << "No arguments provided. Here is a tutorial to get things working:" << endl;
		help();
	}
	else if (!strcmp ("help", argv[1]))
		 {
			cout << "Here is help:" << endl;
			help();
		 }
		 else if (!strcmp ("test1" , argv[1]))
		 	  {
			 	  cout << "Running test 1..." << endl;
			 	  test1(specterBuilder);
		 	  }
		 	  else if (!strcmp ("test2", argv[1]))
		 	  	   {
			 	  	   cout << "Running test 2..." << endl;
			 	  	   test2(specterBuilder);
		 	  	   }

	cout << argv[1] << endl;

	return 0;
}
