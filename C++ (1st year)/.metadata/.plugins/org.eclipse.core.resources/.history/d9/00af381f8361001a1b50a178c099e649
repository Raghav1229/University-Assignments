/*
 * CLI.cpp
 *
 *  Created on: Mar 5, 2020
 *      Author: vlad
 */

#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include "CLI.hpp"
using namespace std;

void CLI::run()
{
	cout << "Current logfile is " << pathToLogfile << endl;
	// print help to console
	cout << help() << endl;
	previouslyCalledFn = "";
	string command;
	// infinite loop that breaks after quit() or exit()
	while (loopBreakerFlag)
	{
		// get command from user
		std::getline(std::cin, command);
		// check it for validity
		callFunction (command);
		if (writeToHistoryFlag || previouslyCalledFn == "logON" || previouslyCalledFn == "logOFF")
		{
			LogEntry* entryPtr = new LogEntry(previouslyCalledFn);
			history.push_back(entryPtr);
		}
	}
	logClearHistory();
}


string CLI::help()
{
	string result =
			"\n Commands that are recognized: \n"
			"- help \n"
			"- quit : save + exit \n"
			"- exit : exit from interface \n"
			"- save : write to logfile \n"
			"- load : load history from current logfile\n"
			"- logfile \n"
			"  (w/o param - return the name of the logfile, w/ param (name of logfile) - sets new logfile) \n"
			"- list \n"
			"date - command \n"
			"(2020.03.04 10:45:32) \n"
			"- log on - write to log \n"
			"- log off - stop writing to log \n"
			"- log append \n"
			"- log new \n"
			"- log clear history (what list displays) ";
	previouslyCalledFn = __func__;
	return result;
}

bool CLI::save()
{
	previouslyCalledFn = __func__;
	ofstream (pathToLogfile, (processingMode ? ios::app : ios::trunc));
	return true;
}

bool CLI::load()
{
	previouslyCalledFn = __func__;
	return true;
}

void CLI::exit()
{
	loopBreakerFlag = false;
	previouslyCalledFn = __func__;
}

void CLI::list()
{
	for (int i = 0; i < (int)history.size(); i++)
	{
		LogEntry tmp = *(history[i]);
		cout << tmp.getLogEntry() << endl;
	}
	previouslyCalledFn = __func__;
}

void CLI::logClearHistory()
{
	for (int i = 0; i < (int)history.size(); i++)
	{
		delete history[i];
	}
	history.clear();
	previouslyCalledFn = __func__;
}

void CLI::quit()
{
	exit();
	save();
	previouslyCalledFn = __func__;
}

void CLI::logON()
{
	writeToHistoryFlag = true;
	previouslyCalledFn = __func__;
}

void CLI::logOFF()
{
	writeToHistoryFlag = false;
	previouslyCalledFn = __func__;
}

void CLI::logAppend()
{
	processingMode = true;
	previouslyCalledFn = __func__;
}

void CLI::logNew()
{
	processingMode = false;
	previouslyCalledFn = __func__;
}

void CLI::logfile()
{
	cout <<  pathToLogfile << endl;
	previouslyCalledFn = __func__;
}

void CLI::logfile(string filename)
{
	bool test = checkValidity(filename);

	string functionName = __func__;
	previouslyCalledFn = functionName + "(" + filename +")";

	if (!test) return;

	pathToLogfile = filename;
	cout << "A new logfile has been set. \n";
}


// Helper methods.


void CLI::callFunction(string command)
{
	// vector of tokens
	vector<string> tokens;
	// tokenizing string
	stringstream ss (command);
	string token = "";
	while (getline(ss, token, ' '))
		tokens.push_back(token);

	// if-conditions depending on the amount of
	if (tokens.size() == 1)
	{
		if (tokens[0] == "help") help();
		else if (tokens[0] == "quit") quit();
		else if (tokens[0] == "save") save();
		else if (tokens[0] == "load") load();
		else if (tokens[0] == "exit") exit();
		else if (tokens[0] == "logfile") logfile();
		else if (tokens[0] == "list") list();
		else if (tokens[0] == "logNew") logNew();
		else if (tokens[0] == "logAppend") logAppend();
		else wrongCommand(command);
	}
	else if (tokens.size() == 2)
	{
		if (tokens[0] == "logfile") logfile(tokens[1]);
		else if (tokens[0] == "log" && tokens[1] == "on") logON();
		else if (tokens[0] == "log" && tokens[1] == "off") logOFF();
		else if (tokens[0] == "log" && tokens[1] == "append") logAppend();
		else if (tokens[0] == "log" && tokens[1] == "new") logNew();
		else wrongCommand(command);
	}
	else if (tokens.size() == 3)
	{
		if (tokens[0] == "log" && tokens[1] == "clear" && tokens[2] == "history") logClearHistory();
	}
	else wrongCommand(command);
}

void CLI::wrongCommand(string command)
{
	previouslyCalledFn = "failed: " + command;
	cout << "Wrong command! Type \"help\" for more info. \n";
}

bool CLI::checkValidity (string path)
{
	ofstream of;
		of.open(path);
		if (!of.is_open())
		{
			cout <<  "An error has occurred while trying to open a stream with such a filename. Try again. \n";
			return false;
		}
	of.close();
	return true;
}
