'''
Завдання 3. Записати регулярний вираз у синтаксисі бібліотеки регулярних виразів
однієї з мов програмування (C++, Java, JavaScript, Python – на вибір), що перевіряє
коректність рядків  файлу відповідно умові.

Завдання 4. Написати програму, що за допомогою вбудованої бібліотеки регулярних
виразів за текстовим файлом будує інший текстовий файл у тому ж форматі з інформацією
згідно варіанту. Використовувати для перетворення рядків або виділення їх частин засоби
роботи з рядками або щось інше, відмінне від засобів бібліотеки регулярних виразів,
заборонено.


Записи основного файлу містять поля: код групи, набрані на екзамені бали, набрані
впродовж семестру бали, ім’я, прізвище, предмет, номер залікової книжки, по-батькові,
сумарна оцінка в балах за 100-бальною системою, оцінка за державною шкалою
Обмеження

DONE:
Код групи складається не більш ніж з 3 літер. Крім літер алфавіту може містити десяткові цифри та дефіс.
Бали є цілими та невід’ємними.
Предмет може мати до 54 символів включно. Крім літер алфавіту може містити подвійні
лапки, пробіл та дефіс.
Номер заліковки складається з 8 десяткових цифр.
Бали та оцінка є значеннями цілих числових типів. Решта полів є рядками.
Оцінка за державною шкалою може приймати значення: 2-5 – як зазвичай, 0 – не
з’явився, -1 – не допущений.

Прізвище, ім’я та по-батькові можуть мати до 21, 24, 24 відповідно символів включно
кожне. Крім літер алфавіту можуть містити апостроф та дефіс.



_________________________________________
Побудувати файл, що містить ту саму інформацію, але без поля "оцінка за державною
шкалою". У вихідному файлі роздільниками мають бути ;

'''

import re


def clean_string_and_write(s, fout, whitespace=True):
    if s:
        result = s.group(0)
        if whitespace:
            result = re.sub("\s", "", result)
        fout.write(result + ";")
    else:
        raise Exception("Wrong format of text!")


def find_in_file():
    # Use a breakpoint in the code line below to debug your script.
    fin = open("file.txt", "r")
    fout = open("fileout.txt", "w")
    s = fin.readline()
    while s:
        '''
        result = re.search(r"(?<![A-Z]|[a-z]|-|[0-9])([A-Z]|[a-z]|-|[0-9]){1,3}(?![A-Z]|[a-z]|-|[0-9])(\s)*[;:?](\s)*"
                           r"(?<![0-9])(40|[1-3][0-9]|[0-9])(?![0-9])(\s)*[;:?](\s)*"
                           r"(?<![0-9])(60|[1-5][0-9]|[0-9])(?![0-9])(\s)*[;:?](\s)*"
                           r"(?<!([A-Z]|[a-z]|-|`))([A-Z]|[a-z]|-|`){1,21}(?!([A-Z]|[a-z]|-|`))(\s)*[;:?](\s)*"
                           r"(?<!([A-Z]|[a-z]|-|`))([A-Z]|[a-z]|-|`){1,24}(?!([A-Z]|[a-z]|-|`))(\s)*[;:?](\s)*"
                           r"(?<!([A-Z]|[a-z]|-|\"| ))([A-Z]|[a-z]|-|\"| ){1,54}(?!([A-Z]|[a-z]|-|\"| ))(\s)*[;:?](\s)*"
                           r"(?<![0-9])([0-9]{8})(?![0-9])(\s)*[;:?](\s)*"
                           r"(?<!([A-Z]|[a-z]|-|`))([A-Z]|[a-z]|-|`){1,24}(?!([A-Z]|[a-z]|-|`]))(\s)*[;:?](\s)*"
                           r"(?<![0-9])(100|[1-9][0-9]|[0-9])(?![0-9])(\s)*[;:?](\s)*"
                           r"(?<!(-|0|1|[2-5]))(0|-1|[2-5])(?!(-|0|1|[2-5]))(\s)*"
                           , s)
        if result:
            print (result.group(0))
        '''
        words = re.split(r'\s*[;:?]\s*', s)
        print(words)
        clean_string_and_write(re.search(r"(?<![A-Z]|[a-z]|-|[0-9])([A-Z]|[a-z]|-|[0-9]){1,3}(?![A-Z]|[a-z]|-|[0-9])", words[0]),
                               fout)
        clean_string_and_write(re.search(r"(?<![0-9])(40|[1-3][0-9]|[0-9])(?![0-9])", words[1]), fout)
        clean_string_and_write(re.search(r"(?<![0-9])(60|[1-5][0-9]|[0-9])(?![0-9])", words[2]), fout)
        clean_string_and_write(re.search(r"(?<!([A-Z]|[a-z]|-|`))([A-Z]|[a-z]|-|`){1,21}(?!([A-Z]|[a-z]|-|`))", words[3]), fout)
        clean_string_and_write(re.search(r"(?<!([A-Z]|[a-z]|-|`))([A-Z]|[a-z]|-|`){1,24}(?!([A-Z]|[a-z]|-|`))", words[4]), fout)
        clean_string_and_write(re.search(r"(?<!([A-Z]|[a-z]|-|\"| ))([A-Z]|[a-z]|-|\"| ){1,54}(?!([A-Z]|[a-z]|-|\"| "
                                         r"))", words[5]), fout, whitespace=False)
        clean_string_and_write(re.search(r"(?<![0-9])[0-9]{8}(?![0-9])", words[6]), fout)
        clean_string_and_write(re.search(r"(?<!([A-Z]|[a-z]|-|`))([A-Z]|[a-z]|-|`){1,24}(?!([A-Z]|[a-z]|-|`]))", words[7]),  fout)
        clean_string_and_write(re.search(r"(?<![0-9])(100|[1-9][0-9]|[0-9])(?![0-9])", words[8]), fout)
        fout.write("\n")
        ''''''
        s = fin.readline()


if __name__ == '__main__':
    find_in_file()
